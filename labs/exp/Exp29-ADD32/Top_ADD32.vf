////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Top_ADD32.vf
// /___/   /\     Timestamp : 08/18/2016 00:07:15
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath D:/FPGA_work/SWord-DLD/Exp29-ADD32/Code -intstyle ise -family kintex7 -verilog D:/FPGA_work/SWord-DLD/Exp29-ADD32/Top_ADD32.vf -w D:/FPGA_work/SWord-DLD/Exp29-ADD32/Code/Top_ADD32.sch
//Design Name: Top_ADD32
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module add_MUSER_Top_ADD32(ai, 
                           bi, 
                           ci, 
                           co, 
                           Gi, 
                           Pi, 
                           si);

    input ai;
    input bi;
    input ci;
   output co;
   output Gi;
   output Pi;
   output si;
   
   wire XLXN_10;
   wire Pi_DUMMY;
   wire Gi_DUMMY;
   
   assign Gi = Gi_DUMMY;
   assign Pi = Pi_DUMMY;
   XOR2  XLXI_1 (.I0(bi), 
                .I1(ai), 
                .O(Pi_DUMMY));
   XOR2  XLXI_2 (.I0(ci), 
                .I1(Pi_DUMMY), 
                .O(si));
   AND2  XLXI_3 (.I0(ci), 
                .I1(Pi_DUMMY), 
                .O(XLXN_10));
   AND2  XLXI_4 (.I0(ai), 
                .I1(bi), 
                .O(Gi_DUMMY));
   OR2  XLXI_5 (.I0(Gi_DUMMY), 
               .I1(XLXN_10), 
               .O(co));
endmodule
`timescale 1ns / 1ps

module CLA_MUSER_Top_ADD32(Ci, 
                           G0, 
                           G1, 
                           G2, 
                           G3, 
                           P0, 
                           P1, 
                           P2, 
                           P3, 
                           C1, 
                           C2, 
                           C3, 
                           GG, 
                           GP);

    input Ci;
    input G0;
    input G1;
    input G2;
    input G3;
    input P0;
    input P1;
    input P2;
    input P3;
   output C1;
   output C2;
   output C3;
   output GG;
   output GP;
   
   wire XLXN_3;
   wire XLXN_36;
   wire XLXN_59;
   wire XLXN_100;
   wire XLXN_105;
   wire XLXN_108;
   wire XLXN_163;
   wire XLXN_164;
   wire XLXN_165;
   
   AND2  XLXI_1 (.I0(P0), 
                .I1(Ci), 
                .O(XLXN_3));
   AND2  XLXI_2 (.I0(G0), 
                .I1(P1), 
                .O(XLXN_59));
   OR2  XLXI_3 (.I0(G0), 
               .I1(XLXN_3), 
               .O(C1));
   OR3  XLXI_4 (.I0(G1), 
               .I1(XLXN_59), 
               .I2(XLXN_36), 
               .O(C2));
   AND3  XLXI_5 (.I0(P1), 
                .I1(P0), 
                .I2(Ci), 
                .O(XLXN_36));
   AND2  XLXI_18 (.I0(P2), 
                 .I1(G1), 
                 .O(XLXN_108));
   AND3  XLXI_19 (.I0(P2), 
                 .I1(P1), 
                 .I2(G0), 
                 .O(XLXN_105));
   AND4  XLXI_20 (.I0(P2), 
                 .I1(P1), 
                 .I2(P0), 
                 .I3(Ci), 
                 .O(XLXN_100));
   OR4  XLXI_21 (.I0(G2), 
                .I1(XLXN_108), 
                .I2(XLXN_105), 
                .I3(XLXN_100), 
                .O(C3));
   AND4  XLXI_22 (.I0(P3), 
                 .I1(P2), 
                 .I2(P1), 
                 .I3(P0), 
                 .O(GP));
   AND4  XLXI_23 (.I0(P3), 
                 .I1(P2), 
                 .I2(P1), 
                 .I3(G0), 
                 .O(XLXN_163));
   AND3  XLXI_24 (.I0(P3), 
                 .I1(P2), 
                 .I2(G1), 
                 .O(XLXN_164));
   AND2  XLXI_25 (.I0(P3), 
                 .I1(G2), 
                 .O(XLXN_165));
   OR4  XLXI_26 (.I0(G3), 
                .I1(XLXN_165), 
                .I2(XLXN_164), 
                .I3(XLXN_163), 
                .O(GG));
endmodule
`timescale 1ns / 1ps

module ACLA4_MUSER_Top_ADD32(ai, 
                             bi, 
                             C0, 
                             GG, 
                             GP, 
                             s);

    input [3:0] ai;
    input [3:0] bi;
    input C0;
   output GG;
   output GP;
   output [3:0] s;
   
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_180;
   wire XLXN_217;
   wire XLXN_218;
   
   add_MUSER_Top_ADD32  A0 (.ai(ai[0]), 
                           .bi(bi[0]), 
                           .ci(C0), 
                           .co(), 
                           .Gi(XLXN_218), 
                           .Pi(XLXN_180), 
                           .si(s[0]));
   add_MUSER_Top_ADD32  A1 (.ai(ai[1]), 
                           .bi(bi[1]), 
                           .ci(XLXN_8), 
                           .co(), 
                           .Gi(XLXN_7), 
                           .Pi(XLXN_217), 
                           .si(s[1]));
   add_MUSER_Top_ADD32  A2 (.ai(ai[2]), 
                           .bi(bi[2]), 
                           .ci(XLXN_13), 
                           .co(), 
                           .Gi(XLXN_10), 
                           .Pi(XLXN_9), 
                           .si(s[2]));
   add_MUSER_Top_ADD32  A3 (.ai(ai[3]), 
                           .bi(bi[3]), 
                           .ci(XLXN_14), 
                           .co(), 
                           .Gi(XLXN_12), 
                           .Pi(XLXN_11), 
                           .si(s[3]));
   CLA_MUSER_Top_ADD32  CLA0 (.Ci(C0), 
                             .G0(XLXN_218), 
                             .G1(XLXN_7), 
                             .G2(XLXN_10), 
                             .G3(XLXN_12), 
                             .P0(XLXN_180), 
                             .P1(XLXN_217), 
                             .P2(XLXN_9), 
                             .P3(XLXN_11), 
                             .C1(XLXN_8), 
                             .C2(XLXN_13), 
                             .C3(XLXN_14), 
                             .GG(GG), 
                             .GP(GP));
endmodule
`timescale 1ns / 1ps

module ADC32_MUSER_Top_ADD32(a, 
                             b, 
                             C0, 
                             Co, 
                             s);

    input [31:0] a;
    input [31:0] b;
    input C0;
   output Co;
   output [31:0] s;
   
   wire XLXN_190;
   wire XLXN_222;
   wire XLXN_255;
   wire XLXN_256;
   wire XLXN_308;
   wire XLXN_323;
   wire XLXN_324;
   wire XLXN_325;
   wire XLXN_326;
   wire XLXN_327;
   wire XLXN_328;
   wire XLXN_329;
   wire XLXN_344;
   wire XLXN_345;
   wire XLXN_348;
   wire XLXN_349;
   wire XLXN_358;
   wire XLXN_362;
   wire XLXN_363;
   wire XLXN_364;
   wire XLXN_365;
   wire XLXN_366;
   wire XLXN_367;
   wire XLXN_370;
   wire XLXN_371;
   wire XLXN_372;
   wire XLXN_377;
   wire XLXN_378;
   wire XLXN_379;
   
   CLA_MUSER_Top_ADD32  CLA1 (.Ci(XLXN_358), 
                             .G0(XLXN_255), 
                             .G1(XLXN_363), 
                             .G2(XLXN_365), 
                             .G3(XLXN_190), 
                             .P0(XLXN_256), 
                             .P1(XLXN_362), 
                             .P2(XLXN_364), 
                             .P3(XLXN_371), 
                             .C1(XLXN_366), 
                             .C2(XLXN_367), 
                             .C3(XLXN_370), 
                             .GG(XLXN_308), 
                             .GP(XLXN_378));
   CLA_MUSER_Top_ADD32  CLA2 (.Ci(C0), 
                             .G0(XLXN_323), 
                             .G1(XLXN_325), 
                             .G2(XLXN_327), 
                             .G3(XLXN_329), 
                             .P0(XLXN_222), 
                             .P1(XLXN_324), 
                             .P2(XLXN_326), 
                             .P3(XLXN_328), 
                             .C1(XLXN_344), 
                             .C2(XLXN_345), 
                             .C3(XLXN_348), 
                             .GG(XLXN_349), 
                             .GP(XLXN_372));
   OR2  XLXI_34 (.I0(XLXN_379), 
                .I1(XLXN_308), 
                .O(Co));
   OR2  XLXI_36 (.I0(XLXN_377), 
                .I1(XLXN_349), 
                .O(XLXN_358));
   AND2  XLXI_37 (.I0(C0), 
                 .I1(XLXN_372), 
                 .O(XLXN_377));
   AND2  XLXI_38 (.I0(XLXN_358), 
                 .I1(XLXN_378), 
                 .O(XLXN_379));
   ACLA4_MUSER_Top_ADD32  XLXI_39 (.ai(a[31:28]), 
                                  .bi(b[31:28]), 
                                  .C0(XLXN_370), 
                                  .GG(XLXN_190), 
                                  .GP(XLXN_371), 
                                  .s(s[31:28]));
   ACLA4_MUSER_Top_ADD32  XLXI_40 (.ai(a[27:24]), 
                                  .bi(b[27:24]), 
                                  .C0(XLXN_367), 
                                  .GG(XLXN_365), 
                                  .GP(XLXN_364), 
                                  .s(s[27:24]));
   ACLA4_MUSER_Top_ADD32  XLXI_41 (.ai(a[23:20]), 
                                  .bi(b[23:20]), 
                                  .C0(XLXN_366), 
                                  .GG(XLXN_363), 
                                  .GP(XLXN_362), 
                                  .s(s[23:20]));
   ACLA4_MUSER_Top_ADD32  XLXI_42 (.ai(a[19:16]), 
                                  .bi(b[19:16]), 
                                  .C0(XLXN_358), 
                                  .GG(XLXN_255), 
                                  .GP(XLXN_256), 
                                  .s(s[19:16]));
   ACLA4_MUSER_Top_ADD32  XLXI_43 (.ai(a[15:12]), 
                                  .bi(b[15:12]), 
                                  .C0(XLXN_348), 
                                  .GG(XLXN_329), 
                                  .GP(XLXN_328), 
                                  .s(s[15:12]));
   ACLA4_MUSER_Top_ADD32  XLXI_44 (.ai(a[11:8]), 
                                  .bi(b[11:8]), 
                                  .C0(XLXN_345), 
                                  .GG(XLXN_327), 
                                  .GP(XLXN_326), 
                                  .s(s[11:8]));
   ACLA4_MUSER_Top_ADD32  XLXI_45 (.ai(a[7:4]), 
                                  .bi(b[7:4]), 
                                  .C0(XLXN_344), 
                                  .GG(XLXN_325), 
                                  .GP(XLXN_324), 
                                  .s(s[7:4]));
   ACLA4_MUSER_Top_ADD32  XLXI_46 (.ai(a[3:0]), 
                                  .bi(b[3:0]), 
                                  .C0(C0), 
                                  .GG(XLXN_323), 
                                  .GP(XLXN_222), 
                                  .s(s[3:0]));
endmodule
`timescale 1ns / 1ps

module MC14495_ZJU_MUSER_Top_ADD32(D0, 
                                   D1, 
                                   D2, 
                                   D3, 
                                   LE, 
                                   point, 
                                   a, 
                                   b, 
                                   c, 
                                   d, 
                                   e, 
                                   f, 
                                   g, 
                                   p);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output p;
   
   wire XLXN_14;
   wire XLXN_24;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_72;
   wire XLXN_73;
   wire XLXN_74;
   wire XLXN_75;
   wire XLXN_111;
   wire XLXN_115;
   wire XLXN_119;
   wire XLXN_140;
   wire XLXN_141;
   wire XLXN_170;
   wire XLXN_171;
   wire XLXN_172;
   wire XLXN_184;
   wire XLXN_185;
   wire XLXN_186;
   wire XLXN_200;
   wire XLXN_201;
   wire XLXN_202;
   wire XLXN_208;
   wire XLXN_209;
   wire XLXN_210;
   wire XLXN_211;
   wire XLXN_212;
   wire XLXN_213;
   wire XLXN_214;
   
   INV  XLXI_1 (.I(D3), 
               .O(XLXN_14));
   INV  XLXI_2 (.I(D2), 
               .O(XLXN_61));
   INV  XLXI_3 (.I(D1), 
               .O(XLXN_62));
   INV  XLXI_4 (.I(D0), 
               .O(XLXN_24));
   AND4  XLXI_5 (.I0(D0), 
                .I1(XLXN_61), 
                .I2(XLXN_62), 
                .I3(XLXN_14), 
                .O(XLXN_119));
   AND4  XLXI_6 (.I0(XLXN_24), 
                .I1(XLXN_62), 
                .I2(D2), 
                .I3(XLXN_14), 
                .O(XLXN_26));
   AND4  XLXI_7 (.I0(D0), 
                .I1(XLXN_62), 
                .I2(D2), 
                .I3(D3), 
                .O(XLXN_27));
   AND4  XLXI_8 (.I0(D0), 
                .I1(D1), 
                .I2(XLXN_61), 
                .I3(D3), 
                .O(XLXN_28));
   OR4  XLXI_17 (.I0(XLXN_28), 
                .I1(XLXN_27), 
                .I2(XLXN_26), 
                .I3(XLXN_119), 
                .O(XLXN_208));
   AND4  XLXI_18 (.I0(D0), 
                 .I1(XLXN_62), 
                 .I2(D2), 
                 .I3(XLXN_14), 
                 .O(XLXN_72));
   AND3  XLXI_19 (.I0(XLXN_24), 
                 .I1(D1), 
                 .I2(D2), 
                 .O(XLXN_73));
   AND3  XLXI_20 (.I0(XLXN_24), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_74));
   AND3  XLXI_21 (.I0(D0), 
                 .I1(D1), 
                 .I2(D3), 
                 .O(XLXN_75));
   OR4  XLXI_22 (.I0(XLXN_75), 
                .I1(XLXN_74), 
                .I2(XLXN_73), 
                .I3(XLXN_72), 
                .O(XLXN_209));
   AND4  XLXI_23 (.I0(XLXN_24), 
                 .I1(D1), 
                 .I2(XLXN_61), 
                 .I3(XLXN_14), 
                 .O(XLXN_111));
   AND3  XLXI_24 (.I0(D1), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_115));
   OR3  XLXI_26 (.I0(XLXN_115), 
                .I1(XLXN_111), 
                .I2(XLXN_74), 
                .O(XLXN_210));
   AND3  XLXI_27 (.I0(D0), 
                 .I1(D1), 
                 .I2(D2), 
                 .O(XLXN_140));
   AND4  XLXI_28 (.I0(XLXN_24), 
                 .I1(D1), 
                 .I2(XLXN_61), 
                 .I3(D3), 
                 .O(XLXN_141));
   OR4  XLXI_29 (.I0(XLXN_141), 
                .I1(XLXN_140), 
                .I2(XLXN_26), 
                .I3(XLXN_119), 
                .O(XLXN_211));
   AND3  XLXI_30 (.I0(XLXN_62), 
                 .I1(D2), 
                 .I2(XLXN_14), 
                 .O(XLXN_171));
   AND2  XLXI_32 (.I0(D0), 
                 .I1(XLXN_14), 
                 .O(XLXN_170));
   AND3  XLXI_35 (.I0(D0), 
                 .I1(XLXN_62), 
                 .I2(XLXN_61), 
                 .O(XLXN_172));
   OR3  XLXI_36 (.I0(XLXN_172), 
                .I1(XLXN_171), 
                .I2(XLXN_170), 
                .O(XLXN_212));
   AND3  XLXI_37 (.I0(D0), 
                 .I1(XLXN_61), 
                 .I2(XLXN_14), 
                 .O(XLXN_184));
   AND3  XLXI_38 (.I0(D1), 
                 .I1(XLXN_61), 
                 .I2(XLXN_14), 
                 .O(XLXN_185));
   AND3  XLXI_39 (.I0(D0), 
                 .I1(D1), 
                 .I2(XLXN_14), 
                 .O(XLXN_186));
   OR4  XLXI_41 (.I0(XLXN_186), 
                .I1(XLXN_185), 
                .I2(XLXN_184), 
                .I3(XLXN_27), 
                .O(XLXN_213));
   AND3  XLXI_42 (.I0(XLXN_62), 
                 .I1(XLXN_61), 
                 .I2(XLXN_14), 
                 .O(XLXN_200));
   AND4  XLXI_43 (.I0(D0), 
                 .I1(D1), 
                 .I2(D2), 
                 .I3(XLXN_14), 
                 .O(XLXN_201));
   AND4  XLXI_44 (.I0(XLXN_24), 
                 .I1(XLXN_62), 
                 .I2(D2), 
                 .I3(D3), 
                 .O(XLXN_202));
   OR3  XLXI_46 (.I0(XLXN_202), 
                .I1(XLXN_201), 
                .I2(XLXN_200), 
                .O(XLXN_214));
   OR2  XLXI_47 (.I0(LE), 
                .I1(XLXN_208), 
                .O(a));
   OR2  XLXI_48 (.I0(LE), 
                .I1(XLXN_209), 
                .O(b));
   OR2  XLXI_49 (.I0(LE), 
                .I1(XLXN_210), 
                .O(c));
   OR2  XLXI_50 (.I0(LE), 
                .I1(XLXN_211), 
                .O(d));
   OR2  XLXI_51 (.I0(LE), 
                .I1(XLXN_212), 
                .O(e));
   OR2  XLXI_52 (.I0(LE), 
                .I1(XLXN_213), 
                .O(f));
   OR2  XLXI_53 (.I0(LE), 
                .I1(XLXN_214), 
                .O(g));
   INV  XLXI_57 (.I(point), 
                .O(p));
endmodule
`timescale 1ns / 1ps

module Seg7_Dev_MUSER_Top_ADD32(flash, 
                                Hexs, 
                                LES, 
                                point, 
                                Scan, 
                                SW0, 
                                AN, 
                                SEGMENT);

    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input [2:0] Scan;
    input SW0;
   output [3:0] AN;
   output [7:0] SEGMENT;
   
   wire G0;
   wire [3:0] Hex;
   wire [7:0] SEG_MAP;
   wire [7:0] SEG_TXT;
   wire V5;
   wire XLXN_271;
   wire XLXN_382;
   wire XLXN_385;
   
   MUX2T1_8  MUXHM (.I0(SEG_MAP[7:0]), 
                   .I1(SEG_TXT[7:0]), 
                   .s(SW0), 
                   .o(SEGMENT[7:0]));
   MC14495_ZJU_MUSER_Top_ADD32  M1 (.D0(Hex[0]), 
                                   .D1(Hex[1]), 
                                   .D2(Hex[2]), 
                                   .D3(Hex[3]), 
                                   .LE(XLXN_385), 
                                   .point(XLXN_271), 
                                   .a(SEG_TXT[0]), 
                                   .b(SEG_TXT[1]), 
                                   .c(SEG_TXT[2]), 
                                   .d(SEG_TXT[3]), 
                                   .e(SEG_TXT[4]), 
                                   .f(SEG_TXT[5]), 
                                   .g(SEG_TXT[6]), 
                                   .p(SEG_TXT[7]));
   ScanSync  M2 (.Hexs(Hexs[31:0]), 
                .LES(LES[7:0]), 
                .point(point[7:0]), 
                .Scan(Scan[2:0]), 
                .AN(AN[3:0]), 
                .Hexo(Hex[3:0]), 
                .LE(XLXN_382), 
                .p(XLXN_271));
   Seg_map  M3 (.Hexs(Hexs[31:0]), 
               .Scan(Scan[2:0]), 
               .Seg_map(SEG_MAP[7:0]));
   VCC  XLXI_23 (.P(V5));
   GND  XLXI_24 (.G(G0));
   AND2  XLXI_44 (.I0(XLXN_382), 
                 .I1(flash), 
                 .O(XLXN_385));
endmodule
`timescale 1ns / 1ps

module Display_MUSER_Top_ADD32(clk, 
                               flash, 
                               Hexs, 
                               LES, 
                               point, 
                               rst, 
                               Start, 
                               SW0, 
                               seg_clk, 
                               seg_clrn, 
                               SEG_PEN, 
                               seg_sout);

    input clk;
    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input rst;
    input Start;
    input SW0;
   output seg_clk;
   output seg_clrn;
   output SEG_PEN;
   output seg_sout;
   
   wire [63:0] SEGMENT;
   wire [63:0] SEG_MAP;
   wire [63:0] XLXN_390;
   
   MUX2T1_64  MUXSH2M (.a(XLXN_390[63:0]), 
                      .b(SEG_MAP[63:0]), 
                      .sel(SW0), 
                      .o(SEGMENT[63:0]));
   P2S  M2 (.clk(clk), 
           .P_Data(SEGMENT[63:0]), 
           .rst(rst), 
           .Serial(Start), 
           .EN(SEG_PEN), 
           .sout(seg_sout), 
           .s_clk(seg_clk), 
           .s_clrn(seg_clrn));
   HexTo8SEG  SM1 (.flash(flash), 
                  .Hexs(Hexs[31:0]), 
                  .LES(LES[7:0]), 
                  .points(point[7:0]), 
                  .SEG_TXT(XLXN_390[63:0]));
   SSeg_map  SM3 (.Disp_num({Hexs[31:0], Hexs[31:0]}), 
                 .Seg_map(SEG_MAP[63:0]));
endmodule
`timescale 1ns / 1ps

module Top_ADD32(BTN_y, 
                 clk_100mhz, 
                 RSTN, 
                 SW, 
                 AN, 
                 BTN_x, 
                 Buzzer, 
                 CR, 
                 LED, 
                 led_clk, 
                 led_clrn, 
                 LED_PEN, 
                 led_sout, 
                 RDY, 
                 readn, 
                 SEGMENT, 
                 seg_clk, 
                 seg_clrn, 
                 SEG_PEN, 
                 seg_sout);

    input [3:0] BTN_y;
   (* LOC = "t9" *) 
    input clk_100mhz;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output [4:0] BTN_x;
   output Buzzer;
   output CR;
   output [7:0] LED;
   output led_clk;
   output led_clrn;
   output LED_PEN;
   output led_sout;
   output RDY;
   output readn;
   output [7:0] SEGMENT;
   output seg_clk;
   output seg_clrn;
   output SEG_PEN;
   output seg_sout;
   
   wire [31:0] Ai;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire [31:0] clk_div;
   wire Co;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire G0;
   wire [7:0] LE_out;
   wire N0;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire [31:0] XLXN_225;
   wire [4:0] XLXN_444;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   clkdiv  M1 (.clk(clk_100mhz), 
              .rst(rst), 
              .clkdiv(Div[31:0]));
   SAnti_jitter  M2 (.clk(clk_100mhz), 
                    .Key_y(BTN_y[3:0]), 
                    .readn(readn_DUMMY), 
                    .RSTN(RSTN), 
                    .SW(SW[15:0]), 
                    .BTN_OK(BTN_OK[3:0]), 
                    .CR(CR), 
                    .Key_out(XLXN_444[4:0]), 
                    .Key_ready(RDY_DUMMY), 
                    .Key_x(BTN_x[4:0]), 
                    .pulse_out(Pulse[3:0]), 
                    .rst(rst), 
                    .SW_OK(SW_OK[15:0]));
   Display_MUSER_Top_ADD32  M3 (.clk(clk_100mhz), 
                               .flash(Div[25]), 
                               .Hexs(Disp_num[31:0]), 
                               .LES(LE_out[7:0]), 
                               .point(point_out[7:0]), 
                               .rst(rst), 
                               .Start(Div[20]), 
                               .SW0(SW_OK[0]), 
                               .seg_clk(seg_clk), 
                               .seg_clrn(seg_clrn), 
                               .SEG_PEN(SEG_PEN), 
                               .seg_sout(seg_sout));
   SEnter_2_32  M4 (.BTN(BTN_OK[2:0]), 
                   .clk(clk_100mhz), 
                   .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                   .Din(XLXN_444[4:0]), 
                   .D_ready(RDY_DUMMY), 
                   .Ai(Ai[31:0]), 
                   .Bi(Bi[31:0]), 
                   .blink(blink[7:0]), 
                   .readn(readn_DUMMY));
   Multi_8CH32  M5 (.clk(clk_100mhz), 
                   .Data0(Ai[31:0]), 
                   .data1(Bi[31:0]), 
                   .data2(XLXN_225[31:0]), 
                   .data3(XLXN_225[31:0]), 
                   .data4(XLXN_225[31:0]), 
                   .data5(XLXN_225[31:0]), 
                   .data6(XLXN_225[31:0]), 
                   .data7(XLXN_225[31:0]), 
                   .EN(V5), 
                   .LES({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, blink[7:0], blink[7:0]}), 
                   .point_in({clk_div[31:0], clk_div[31:0]}), 
                   .rst(rst), 
                   .Test(SW_OK[7:5]), 
                   .Disp_num(Disp_num[31:0]), 
                   .LE_out(LE_out[7:0]), 
                   .point_out(point_out[7:0]));
   GPIO  M6 (.clk(clk_100mhz), 
            .EN(V5), 
            .P_Data({Div[25:0], Co, G0, G0, G0, G0, SW_OK[1]}), 
            .rst(rst), 
            .Start(Div[20]), 
            .GPIOf0(), 
            .led_clk(led_clk), 
            .led_clrn(led_clrn), 
            .LED_PEN(LED_PEN), 
            .led_sout(led_sout));
   ADC32_MUSER_Top_ADD32  M8 (.a(Ai[31:0]), 
                             .b(Bi[31:0]), 
                             .C0(), 
                             .Co(Co), 
                             .s(XLXN_225[31:0]));
   Seg7_Dev_MUSER_Top_ADD32  M31 (.flash(Div[25]), 
                                 .Hexs(Disp_num[31:0]), 
                                 .LES(LE_out[7:0]), 
                                 .point(point_out[7:0]), 
                                 .Scan({SW_OK[1], Div[19:18]}), 
                                 .SW0(SW_OK[0]), 
                                 .AN(AN[3:0]), 
                                 .SEGMENT(SEGMENT[7:0]));
   PIO  M61 (.clk(clk_100mhz), 
            .EN(V5), 
            .PData_in({Div[25:0], Co, G0, G0, G0, G0, SW_OK[1]}), 
            .rst(N0), 
            .GPIOf0(), 
            .LED(LED[7:0]));
   VCC  XLXI_1 (.P(V5));
   GND  XLXI_2 (.G(G0));
   BUF  XLXI_41 (.I(V5), 
                .O(Buzzer));
endmodule
